package {{.Package}}

import (
    "github.com/pckhoi/uma"
)

// UMAResourceTypes is a map of defined resource types
var UMAResourceTypes = map[string]uma.ResourceType{{`{`}}{{range $index, $element := .ResourceTypes}}
    {{printf "%q" $index}}: {
        Type: {{printf "%q" $index}},
        Description: {{$element.Description | printf "%q"}},
        IconUri: {{$element.IconUri | printf "%q"}},
        ResourceScopes: []string{{`{`}}{{range $element.ResourceScopes}}{{printf "%q," .}}{{end}}},
    },
{{end}}}

var umaSecuritySchemes = []string{
    {{range $element := .EnabledSecuritySchemes}}{{printf "%q" $element}},{{end}}
}

var umaDefaultResource *uma.ResourceTemplate = {{if eq .DefaultResource nil}}nil{{else}}{{with .DefaultResource}}uma.NewResourceTemplate({{printf "%q" .Type}}, {{printf "%q" .Name}}){{end}}{{end}}

var umaDefaultSecurity uma.Security = {{if eq .DefaultSecurity nil}}nil{{else}}{{with .DefaultSecurity}}[]map[string][]string{{`{`}}{{range $element := .}}
    {{`{`}}{{range $name, $scopes := $element}}
        {{printf "%q" $name}}: {{`{`}}{{range $scope := $scopes}}{{printf "%q" $scope}}{{end}}},
    {{end}}},
{{end}}}{{end}}{{end}}

var umaPaths = []uma.Path{{`{`}}{{range $path := .Paths}}{{with $path}}
    uma.NewPath({{printf "%q" .Path}}, {{if ne .ResourceType ""}}uma.NewResourceTemplate({{printf "%q" .ResourceType}}, {{printf "%q" .ResourceName}}){{else}}nil{{end}}, map[string]uma.Operation{{`{`}}{{range $method, $op := .Operations}}
        {{printf "%q" $method}}: {{`{`}}{{if ne $op.Security nil}}
            Security: []map[string][]string{{`{`}}{{range $element := $op.Security}}
                {{`{`}}{{range $name, $scopes := $element}}
                    {{printf "%q" $name}}: {{`{`}}{{range $scope := $scopes}}{{printf "%q" $scope}}{{end}}},
                {{end}}},
            {{end}}},
        {{end}}},
    {{end}}}),
{{end}}{{end}}}

// UMAManager returns an uma.Manager instance configured according to OpenAPI schema
func UMAManager(opts uma.ManagerOptions) *uma.Manager {
    return uma.New(
        opts,
        UMAResourceTypes,
        umaSecuritySchemes,
        umaDefaultResource,
        umaDefaultSecurity,
        umaPaths,
    )
}
