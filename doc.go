/*
Package uma extends the OpenAPI spec to describe UMA resources and scopes in an API. It can
generate an http middleware from an OpenAPI spec in order to enforce UMA permissions.

# Get started

1. Define resource types

An UMA resource type contains fields that tend to stay the same for resources of the same type.
Define resource types by adding `x-uma-resource-types` section to the root level of the spec e.g.

	x-uma-resource-types:
	  https://www.example.com/rsrcs/users:
	    description: list of users
	    iconUri: https://www.example.com/rsrcs/users/icon.png
	    resourceScopes:
	      - read
	      - write
	  https://www.example.com/rsrcs/user:
	    description: a user
	    iconUri: https://www.example.com/rsrcs/user/icon.png
	    resourceScopes:
	      - read
	      - write

2. Enable UMA in security schemes

UMA access control only work with oauth2 or openIdConnect security scheme. To enable, add the key
`x-uma-enabled` to the security scheme:

	securitySchemes:
	  oidc:
	    type: openIdConnect
	    openIdConnectUrl: /.well-known/openid-configuration
	    x-uma-enabled: true

3. Define resources

UMA resources can be defined at the root level or at individual paths. Root level resource
represents the default resource at all paths. Path level resource overrides root-level resource. e.g.

	x-uma-resource:
	  type: https://www.example.com/rsrcs/users
	  name: Users
	paths:
	  ...
	  /{id}:
	    x-uma-resource:
	      type: https://www.example.com/rsrcs/user
	      name: User {id}

Each resource object has 2 keys: type and name. Type must be one of the types defined earlier. Name
is the name template string that can be rendered using path parameters.

4. Define scopes

UMA scopes are simply oauth2 and openIdConnect scopes. They will work as UMA scopes as long as the
security scheme is uma-enabled:

	security:
	  - oidc: [read]
	paths:
	  /{id}:
	    put:
	      security:
	        - oidc: [write]

5. Generate code

This package can generate relevant go code from the OpenAPI spec:

	go install github.com/pckhoi/uma/uma-codegen
	uma-codegen openapi.yaml mypackage -o uma.gen.go

The generated code will work with any server compatible with the net/http package. It can works by
itself or works along side other generated codes such as those generated by github.com/deepmap/oapi-codegen

6. Use the generated code

	// create a new UMA provider
	keycloakIssuer := "http://localhost:8080/realms/test-realm"
	provider, _ := uma.NewKeycloakProvider(
		issuer, clientID, clientSecret,
		oidc.NewRemoteKeySet(context.Background(), issuer+"/protocol/openid-connect/certs"),
	)
	// create a new UMA manager
	umaManager := mypackage.UMAManager(uma.ManagerOptions{
		GetBaseURL: func(r *http.Request) url.URL {
			return url.URL{
				Scheme: "http",
				Host:   "localhost:" + port,
				Path:   "/users",
			}
		},
		GetProvider: func(r *http.Request) uma.Provider {
			return provider
		},
		// rs is any object that satisfy ResourceStore interface
		ResourceStore: rs,
	})
	s := &http.Server{}
	sm := http.NewServeMux()
	// apply the middleware, which enforces UMA permissions according to spec
	s.Handler = umaManager.Middleware(sm)
*/
package uma
